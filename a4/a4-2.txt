Assignment Part II:  Hoare Triples

a)	

{ n >= 0 & i = 0 & v = 1 }
while (i < n) { i = i + 1; v = 2*v }
{ v = 2^n}

Loop Invariant =   (v=2^i) & (i>=0) & (i<=n)

Proof using Hoare rules:

I = (v=2^i) & (i>=0) & (i<=n)



 i < n & I => v = 2^n             {v=2^n} v=2*v {i<=n & v=2^(i+1) & i>=0}
 -----------------------------------------------------------
                {i<n & I} i=i+1 { i<=n & v=2^(i+1) & i>=0}    { i<=n & v=2^(i+1) & i>=0 } v=2*v { I }
                           -------------------------------------------------------------
i = 0 & v = 1 => I         { i < n & I } i = i + 1; v = 2*v; { I }              I & ~(i < n) => v = 2^n
--------------------------------------------------------------------------------------------------------
{ n >= 0 & i = 0 & v = 1 }   while (i < n) { i = i + 1; v = 2*v }    { v = 2^n}





b)
	
{ n = 2^k & k >= 0 & x = "" }
while (n >1 ) { n = n / 2; x = "-" ++ x; }
{ length(x) = k }

Loop Invariant =   ( length(x) = k - log2(n) ) & (length(x) >= 0) & (n >= 1)


Proof using Hoare rules:

I = ( length(x) = k - log2(n) ) & (length(x) >= 0) & (n >= 1)



n > 1 & I => length(x) = k            {length(x) = k} x = "-" ++ x {length(x) = k - log2(n) - 1 & length(x) >= -1 & n >= 1} 
--------------------------------------------------------------------------
        {n > 1 & I} n = n / 2 {length(x) = k - log2(n) - 1 & length(x) >= -1 & n >= 1} {length(x) = k - log2(n) - 1 & length(x) >= -1 & n >= 1} x = "-" ++ x {I}  
                             ---------------------------------------------------------------------
n = 2^k & k>=0 & x="" => (length(x)=k-log2(n)) & (length(x) >= 0) & (n>= 1)     {n>1 & I} n=n/2; x="-"++x; {I}          I & ~(n>1) => length(x)=k
-----------------------------------------------------------------------------------------------------------------------------
                           { n = 2^k & k >= 0 & x = "" } while (n >1 ) { n = n / 2; x = "-" ++ x; } { length(x) = k }



